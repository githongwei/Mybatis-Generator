<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yinhui.limin.mapper.ExtractMapper" >
  <resultMap id="BaseResultMap" type="com.yinhui.limin.model.po.Extract" >
    <id column="extract_id" property="extractId" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="amount" property="amount" jdbcType="DOUBLE" />
    <result column="account_type" property="accountType" jdbcType="CHAR" />
    <result column="money_account" property="moneyAccount" jdbcType="VARCHAR" />
    <result column="account_name" property="accountName" jdbcType="VARCHAR" />
    <result column="account_number" property="accountNumber" jdbcType="VARCHAR" />
    <result column="bank_name" property="bankName" jdbcType="VARCHAR" />
    <result column="state" property="state" jdbcType="CHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="op_time" property="opTime" jdbcType="TIMESTAMP" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    extract_id, user_id, amount, account_type, money_account, account_name, account_number, 
    bank_name, state, create_time, op_time, remark
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from t_extract
    where extract_id = #{extractId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from t_extract
    where extract_id = #{extractId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.yinhui.limin.model.po.Extract" >
    insert into t_extract (extract_id, user_id, amount, 
      account_type, money_account, account_name, 
      account_number, bank_name, state, 
      create_time, op_time, remark
      )
    values (#{extractId,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, #{amount,jdbcType=DOUBLE}, 
      #{accountType,jdbcType=CHAR}, #{moneyAccount,jdbcType=VARCHAR}, #{accountName,jdbcType=VARCHAR}, 
      #{accountNumber,jdbcType=VARCHAR}, #{bankName,jdbcType=VARCHAR}, #{state,jdbcType=CHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{opTime,jdbcType=TIMESTAMP}, #{remark,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.yinhui.limin.model.po.Extract" >
    insert into t_extract
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="extractId != null" >
        extract_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="accountType != null" >
        account_type,
      </if>
      <if test="moneyAccount != null" >
        money_account,
      </if>
      <if test="accountName != null" >
        account_name,
      </if>
      <if test="accountNumber != null" >
        account_number,
      </if>
      <if test="bankName != null" >
        bank_name,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="opTime != null" >
        op_time,
      </if>
      <if test="remark != null" >
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="extractId != null" >
        #{extractId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=DOUBLE},
      </if>
      <if test="accountType != null" >
        #{accountType,jdbcType=CHAR},
      </if>
      <if test="moneyAccount != null" >
        #{moneyAccount,jdbcType=VARCHAR},
      </if>
      <if test="accountName != null" >
        #{accountName,jdbcType=VARCHAR},
      </if>
      <if test="accountNumber != null" >
        #{accountNumber,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null" >
        #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        #{state,jdbcType=CHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="opTime != null" >
        #{opTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yinhui.limin.model.po.Extract" >
    update t_extract
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=DOUBLE},
      </if>
      <if test="accountType != null" >
        account_type = #{accountType,jdbcType=CHAR},
      </if>
      <if test="moneyAccount != null" >
        money_account = #{moneyAccount,jdbcType=VARCHAR},
      </if>
      <if test="accountName != null" >
        account_name = #{accountName,jdbcType=VARCHAR},
      </if>
      <if test="accountNumber != null" >
        account_number = #{accountNumber,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null" >
        bank_name = #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=CHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="opTime != null" >
        op_time = #{opTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where extract_id = #{extractId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yinhui.limin.model.po.Extract" >
    update t_extract
    set user_id = #{userId,jdbcType=VARCHAR},
      amount = #{amount,jdbcType=DOUBLE},
      account_type = #{accountType,jdbcType=CHAR},
      money_account = #{moneyAccount,jdbcType=VARCHAR},
      account_name = #{accountName,jdbcType=VARCHAR},
      account_number = #{accountNumber,jdbcType=VARCHAR},
      bank_name = #{bankName,jdbcType=VARCHAR},
      state = #{state,jdbcType=CHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      op_time = #{opTime,jdbcType=TIMESTAMP},
      remark = #{remark,jdbcType=VARCHAR}
    where extract_id = #{extractId,jdbcType=VARCHAR}
  </update>
</mapper>